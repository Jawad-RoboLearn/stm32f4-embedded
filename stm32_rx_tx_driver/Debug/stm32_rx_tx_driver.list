
stm32_rx_tx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000474  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000474  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000990  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f9  00000000  00000000  00010e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00011130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  000111d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed0c  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000013a6  00000000  00000000  0001ff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053bad  00000000  00000000  000212fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074ea7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000148  00000000  00000000  00074ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000454 	.word	0x08000454

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000454 	.word	0x08000454

080001d8 <led_init>:
#include "led.h"



void led_init()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
 // enable clk access
	RCC->AHB1ENR |= GPIOA_5;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <led_init+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <led_init+0x34>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

// MODER
	GPIOA->MODER |= (1U<<10);
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <led_init+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <led_init+0x38>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <led_init+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <led_init+0x38>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <main>:




int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	uart_init();
 8000218:	f000 f81e 	bl	8000258 <uart_init>
	led_init();
 800021c:	f7ff ffdc 	bl	80001d8 <led_init>
	{
		//uart_write_single('Y'); Transmit Y


		// Receive data and turn on LED
		data_rx = uart_read();
 8000220:	f000 f8b6 	bl	8000390 <uart_read>
 8000224:	4603      	mov	r3, r0
 8000226:	461a      	mov	r2, r3
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <main+0x3c>)
 800022a:	701a      	strb	r2, [r3, #0]
		if (data_rx == '1')
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <main+0x3c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b31      	cmp	r3, #49	; 0x31
 8000232:	d106      	bne.n	8000242 <main+0x2e>
		{
			GPIOA->ODR |= led_pin;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <main+0x40>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <main+0x40>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	e7ee      	b.n	8000220 <main+0xc>
		}
		else
		{
			GPIOA->ODR &= ~led_pin;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <main+0x40>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a03      	ldr	r2, [pc, #12]	; (8000254 <main+0x40>)
 8000248:	f023 0320 	bic.w	r3, r3, #32
 800024c:	6153      	str	r3, [r2, #20]
		data_rx = uart_read();
 800024e:	e7e7      	b.n	8000220 <main+0xc>
 8000250:	2000001c 	.word	0x2000001c
 8000254:	40020000 	.word	0x40020000

08000258 <uart_init>:



// create the uart init function
void uart_init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	// Part A: UART GPIO Pin setup
	// enable clock to APB1 as its connected to USART2 USB port
	RCC->AHB1ENR |= port_A_clk_enable;
 800025c:	4b35      	ldr	r3, [pc, #212]	; (8000334 <uart_init+0xdc>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000260:	4a34      	ldr	r2, [pc, #208]	; (8000334 <uart_init+0xdc>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6313      	str	r3, [r2, #48]	; 0x30

	// MODER OF GPIOA to Alternate FCN mode PA2 TX
	GPIOA->MODER &= ~(1U<<4);
 8000268:	4b33      	ldr	r3, [pc, #204]	; (8000338 <uart_init+0xe0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a32      	ldr	r2, [pc, #200]	; (8000338 <uart_init+0xe0>)
 800026e:	f023 0310 	bic.w	r3, r3, #16
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000274:	4b30      	ldr	r3, [pc, #192]	; (8000338 <uart_init+0xe0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2f      	ldr	r2, [pc, #188]	; (8000338 <uart_init+0xe0>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6013      	str	r3, [r2, #0]

	// Alternate function setting: See alternate fcn map in data sheet, PA2 for USART TX is AFR7
	GPIOA->AFR[0] &= ~(1U<<11);
 8000280:	4b2d      	ldr	r3, [pc, #180]	; (8000338 <uart_init+0xe0>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a2c      	ldr	r2, [pc, #176]	; (8000338 <uart_init+0xe0>)
 8000286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800028a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800028c:	4b2a      	ldr	r3, [pc, #168]	; (8000338 <uart_init+0xe0>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a29      	ldr	r2, [pc, #164]	; (8000338 <uart_init+0xe0>)
 8000292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000298:	4b27      	ldr	r3, [pc, #156]	; (8000338 <uart_init+0xe0>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a26      	ldr	r2, [pc, #152]	; (8000338 <uart_init+0xe0>)
 800029e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);
 80002a4:	4b24      	ldr	r3, [pc, #144]	; (8000338 <uart_init+0xe0>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a23      	ldr	r2, [pc, #140]	; (8000338 <uart_init+0xe0>)
 80002aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ae:	6213      	str	r3, [r2, #32]

	// MODER OF GPIOA to Alternate FCN mode PA3 RX
		GPIOA->MODER &= ~(1U<<6);
 80002b0:	4b21      	ldr	r3, [pc, #132]	; (8000338 <uart_init+0xe0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a20      	ldr	r2, [pc, #128]	; (8000338 <uart_init+0xe0>)
 80002b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ba:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<7);
 80002bc:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <uart_init+0xe0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a1d      	ldr	r2, [pc, #116]	; (8000338 <uart_init+0xe0>)
 80002c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c6:	6013      	str	r3, [r2, #0]

		// Alternate function setting: See alternate fcn map in data sheet, PA2 for USART TX is AFR7
		GPIOA->AFR[0] &= ~(1U<<15);
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <uart_init+0xe0>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a1a      	ldr	r2, [pc, #104]	; (8000338 <uart_init+0xe0>)
 80002ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002d2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<14);
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <uart_init+0xe0>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a17      	ldr	r2, [pc, #92]	; (8000338 <uart_init+0xe0>)
 80002da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002de:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<13);
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <uart_init+0xe0>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a14      	ldr	r2, [pc, #80]	; (8000338 <uart_init+0xe0>)
 80002e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ea:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<12);
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <uart_init+0xe0>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <uart_init+0xe0>)
 80002f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002f6:	6213      	str	r3, [r2, #32]

	// Part B: USART configuration
	RCC->APB1ENR |= usart_clk_enable; // clk enable
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <uart_init+0xdc>)
 80002fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <uart_init+0xdc>)
 80002fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000302:	6413      	str	r3, [r2, #64]	; 0x40
	set_baud(USART2, clk_sig, baudrate); // set baudrate
 8000304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <uart_init+0xe4>)
 800030a:	480d      	ldr	r0, [pc, #52]	; (8000340 <uart_init+0xe8>)
 800030c:	f000 f82d 	bl	800036a <set_baud>
	USART2->CR1 = tx_enable; // transmitter enable
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <uart_init+0xe8>)
 8000312:	2208      	movs	r2, #8
 8000314:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= rx_enable; // receiver enable
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <uart_init+0xe8>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a09      	ldr	r2, [pc, #36]	; (8000340 <uart_init+0xe8>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= uart_enable; // uart enable
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <uart_init+0xe8>)
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	4a06      	ldr	r2, [pc, #24]	; (8000340 <uart_init+0xe8>)
 8000328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032c:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= word_length; // word length 1 start 8 data 1 stop

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800
 8000338:	40020000 	.word	0x40020000
 800033c:	00f42400 	.word	0x00f42400
 8000340:	40004400 	.word	0x40004400

08000344 <calc_baud>:


// set the baud rate for uart
uint16_t calc_baud(uint32_t clksignal, uint32_t baudval)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	return ((clksignal + (baudval/2U))/baudval);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	085a      	lsrs	r2, r3, #1
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	441a      	add	r2, r3
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	fbb2 f3f3 	udiv	r3, r2, r3
 800035c:	b29b      	uxth	r3, r3

}
 800035e:	4618      	mov	r0, r3
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <set_baud>:

void set_baud(USART_TypeDef *USARTx, uint32_t clksignal, uint32_t baudval)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b084      	sub	sp, #16
 800036e:	af00      	add	r7, sp, #0
 8000370:	60f8      	str	r0, [r7, #12]
 8000372:	60b9      	str	r1, [r7, #8]
 8000374:	607a      	str	r2, [r7, #4]
	USARTx->BRR = calc_baud(clksignal, baudval);
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	68b8      	ldr	r0, [r7, #8]
 800037a:	f7ff ffe3 	bl	8000344 <calc_baud>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	609a      	str	r2, [r3, #8]
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <uart_read>:

char uart_read()
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	while(!(USART2->SR & sr_rxne)){}
 8000394:	bf00      	nop
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <uart_read+0x24>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 0320 	and.w	r3, r3, #32
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f9      	beq.n	8000396 <uart_read+0x6>
	return USART2->DR;
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <uart_read+0x24>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	b2db      	uxtb	r3, r3
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40004400 	.word	0x40004400

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f811 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff ff13 	bl	8000214 <main>

080003ee <LoopForever>:

LoopForever:
    b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	20000020 	.word	0x20000020

08000408 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
